

<style>
    .spinner-green {
        color: #2b9e1b;
    }
</style>

<div class="container my-5">
    <h1 class="text-center mb-4">KashFlow Data Fetch</h1>

    <!-- Fetch In Progress -->
    <% if (isFetching) { %>
        <div id="fetchInProgressAlert" class="alert alert-info text-center">
            A data fetch operation is currently in progress. Please wait...
        </div>
    <% } else { %>
        <!-- Start Fetch Button -->
        <div id="startContainer" class="text-center">
            <button id="startFetchBtn" class="btn btn-hcs-green">Start Fetch</button>
        </div>
    <% } %>

    <!-- Loading Spinner -->
    <div id="loadingContainer" class="text-center d-none">
        <div class="spinner-border spinner-green mb-3" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
        <p id="loadingMessage">Fetching data...</p>
    </div>

    <!-- Status Messages -->
    <div id="statusContainer" class="d-none">
        <ul id="statusList" class="list-group mb-3"></ul>
        <div class="text-center">
            <button id="retryFetchBtn" class="btn btn-danger d-none" onclick="location.reload();">Retry</button>
            <a id="viewDataBtn" href="/tables" class="btn btn-success d-none">View Data</a>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        const startFetchBtn = document.getElementById('startFetchBtn');
        const loadingContainer = document.getElementById('loadingContainer');
        const loadingMessage = document.getElementById('loadingMessage');
        const statusContainer = document.getElementById('statusContainer');
        const statusList = document.getElementById('statusList');
        const retryFetchBtn = document.getElementById('retryFetchBtn');
        const viewDataBtn = document.getElementById('viewDataBtn');
        const fetchInProgressAlert = document.getElementById('fetchInProgressAlert');

        let fetchInterval;

        // Start Fetch Button Click Handler
        if (startFetchBtn) {
            startFetchBtn.addEventListener('click', async () => {
                startFetchBtn.disabled = true;
                loadingContainer.classList.remove('d-none');
                loadingMessage.textContent = 'Starting fetch...';

                try {
                    // Initiate Fetch Request
                    const response = await fetch('/fetch-kashflow-data', { method: 'GET' });
                    if (!response.ok) {
                        throw new Error('Failed to start fetch.');
                    }

                    loadingMessage.textContent = 'Fetching data...';

                    // Poll for status updates
                    fetchInterval = setInterval(checkFetchStatus, 2000); // Poll every 2 seconds
                } catch (error) {
                    loadingMessage.textContent = 'Error starting fetch. Please try again.';
                    retryFetchBtn.classList.remove('d-none');
                    console.error('Error starting fetch:', error);
                }
            });
        }

        // Poll for Fetch Status
        async function checkFetchStatus() {
            try {
                const response = await fetch('/fetch-status');
                const data = await response.json();

                // Update Status Messages
                if (data.messages) {
                    statusContainer.classList.remove('d-none');
                    statusList.innerHTML = ''; // Clear old messages
                    data.messages.forEach((msg) => {
                        const li = document.createElement('li');
                        li.className = `list-group-item ${
                            msg.type === 'success'
                                ? 'list-group-item-success'
                                : msg.type === 'error'
                                ? 'list-group-item-danger'
                                : ''
                        }`;
                        li.textContent = msg.message;
                        statusList.appendChild(li);
                    });
                }

                // Handle Fetch Completion
                if (data.completed) {
                    clearInterval(fetchInterval);
                    loadingContainer.classList.add('d-none');
                    viewDataBtn.classList.remove('d-none');
                }

                // Handle Fetch Errors
                if (data.error) {
                    clearInterval(fetchInterval);
                    loadingContainer.classList.add('d-none');
                    retryFetchBtn.classList.remove('d-none');
                    console.error('Fetch Error:', data.error);
                }
            } catch (error) {
                console.error('Error checking fetch status:', error);
            }
        }
    });
</script>
